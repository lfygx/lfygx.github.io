<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python学习</title>
      <link href="2020/11/29/python%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/11/29/python%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="python学习笔记"><a href="#python学习笔记" class="headerlink" title="python学习笔记"></a>python学习笔记</h1><h2 id="Python基础数据类型"><a href="#Python基础数据类型" class="headerlink" title="Python基础数据类型"></a>Python基础数据类型</h2><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。</p><p>学习编程，认识不同编程中的数据类型是必要的，在Python中，能够直接处理的数据类型有以下几种：</p><p><strong>整数</strong></p><p>整数和我们生活中定义的整数是一个概念，例如：<code>1</code>,<code>2</code>,<code>3</code>,<code>10</code>,<code>100</code>,<code>1000</code>,<code>-1000</code> 等等，都是整数，Python可以处理任意大小的整数。</p><p>对于整数，除了生活中常用的十进制以外，计算机由于使用二进制，所以，在计算机中也常用二进制或者十六进制表示整数。相比十进制数，在Python中使用以下方式表示二进制数和十六进制数。</p><p>二进制数只使用数字0、1表示，在Python中，二进制整数使用前缀<code>0b</code>表示，比如：<code>0b0110</code>，<code>0b1100</code>。</p><p>十六进制数除了0~9十个数字以外，还使用a、b、c、d、e、f，在Python中，十六进制使用前缀<code>0x</code>，比如：<code>0x12ef</code>，<code>0xde2431af</code>。</p><p>十进制数、二进制数和十六进制数之间是可以相互转换的。</p><p><strong>浮点数</strong></p><p>浮点数对应我们生活的是小数，例如：<code>0.1</code>,<code>0.5</code>, <code>12.34</code>, <code>3.1415926</code>等，都是浮点数。</p><p>为什么小数在计算机领域被称为浮点数呢？这是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的（浮动的），比如，<code>1.23x10^9</code>和<code>12.3x10^8</code>是相等的，因此称为浮点数。</p><p>浮点数可以用数学写法，如<code>1.23</code>，<code>3.14</code>，<code>-9.01</code>。但是对于很大或很小的浮点数，就必须用科学计数法表示，在Python中，把10用e替代，比如：<code>1.23x10^9</code>就是<code>1.23e9</code>，或者<code>12.3e8</code>，<code>0.000012</code>可以写成<code>1.2e-5</code>，同学可以自行举出更多的例子。</p><p>这里有必要提醒一点就是，整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的，而浮点数运算则可能会有四舍五入的误差，如何检验，可以在Python终端中输入以下内容<code>0.1 + 0.2</code>，看看可以得到你期望的结果<code>0.3</code>吗？真实结果可能让你失望了。</p><p><img src="https://img4.mukewang.com/5f28f2ef0001bf0701710046.jpg" alt="img"><br>同样的，这里涉及的原理同学也可以学习上面提到的课程进行进一步原理层面的理解。</p><p><strong>字符串</strong></p><p>字符串对应生活中的就是非数字类型的内容，比如一个句子，一段话，在Python中就是字符串，在Python中，字符串是以’’或””括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。</p><p>比如之前练习过的第一个Python程序：<code>print('Hello World')</code>，其中的<code>Hello World</code>就是字符串。</p><p><strong>布尔值</strong></p><p>布尔值对应于生活中的就是<code>对</code>和<code>错</code>，在计算机的世界里，大部分判断都是非错则对的，布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写，不需要使用字符串符号括起来），也可以通过布尔运算计算出来。</p><p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算（注意<code>and</code>,<code>or</code>,<code>not</code>都是Python语言本身的关键字）。</p><p><code>and</code>运算是与运算，只有所有都为 True，and运算结果才是 True。</p><p><code>or</code>运算是或运算，只要其中有一个为 True，or 运算结果就是 True。</p><p><code>not</code>运算是非运算，它是一个单目运算符，把 True 变成 False，False 变成 True。</p><p><strong>空值</strong></p><p>空值是Python里一个特殊的值，用<code>None</code>表示。</p><p>注意，None和0是不一样的，None不能理解为0，因为0是有意义的，比如我有0个苹果表示我没有苹果，0表达的是数值0的意思，而不能表示为我有None个苹果，None是一个特殊的空值。</p><h2 id="Python定义变量的方法"><a href="#Python定义变量的方法" class="headerlink" title="Python定义变量的方法"></a>Python定义变量的方法</h2><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a><strong>什么是变量</strong></h3><p>在Python中，变量的概念基本上和初中代数的方程变量是一致的。例如，对于方程式 y=x*x ，x就是变量。当x=2时，计算结果是4，当x=5时，计算结果是25。</p><h3 id="合法的变量名"><a href="#合法的变量名" class="headerlink" title="合法的变量名"></a><strong>合法的变量名</strong></h3><p>只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型（字符串、布尔值、空值、字典等）。在Python中，定义一个变量需要遵循一定的约束，否则，Python可能识别不出它是一个变量。</p><ol><li>变量名由大小写英文字母、数字和下划线<code>_</code>组成</li><li>变量不能用数字开头</li><li>变量尽量不要和Python关键字重合（比如前面学习过的：and、or、not，否则可能导致Python原有关键字发挥不出作用）</li></ol><p>以下这些变量的定义都是合法的。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num, count, _none, min_value</span><br></pre></td></tr></tbody></table></figure><p>他们都满足上面的三个条件。</p><p>以下这些变量的定义都是不合法的。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1num, 666, 1_cd, and</span><br></pre></td></tr></tbody></table></figure><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a><strong>定义变量</strong></h3><p>定义变量的方式很简单，通过<code>变量名</code> = <code>数据</code>，即可定义一个变量。<br>举个例子：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br></pre></td></tr></tbody></table></figure><p>在这个例子里面，<code>a</code>就是变量，它的值是一个整数1。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello = 'Hello'</span><br></pre></td></tr></tbody></table></figure><p>在这个例子里面，<code>hello</code>就是变量，它的值是一个字符串’Hello’。<br>在Python里面，一个变量可以先后存储多种不同类型的数据。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 1 # 这个时候a存储的是整数类型</span><br><span class="line">print(a)</span><br><span class="line">a = 'ABC' # 这个时候a存储的是字符串类型</span><br><span class="line">print(a)</span><br></pre></td></tr></tbody></table></figure><p>这是Python这类语言特有的特性，我们称之为动态语言，与之对应的是静态语言，Python、Javascript等等都是动态语言，Java、C、C++等等属于静态语言。</p><h2 id="Python的整数与浮点数"><a href="#Python的整数与浮点数" class="headerlink" title="Python的整数与浮点数"></a>Python的整数与浮点数</h2><p>在Python中，整数和浮点数虽然属于不同的数值类型，但是在运算上是可以一起运算的，这从生活经验出发，也是可以理解的。</p><h3 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a><strong>四则运算</strong></h3><p>整数、浮点数可以直接进行四则运算。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 加法</span><br><span class="line">num1 = 10</span><br><span class="line">num2 = 0.5</span><br><span class="line">result = num1 + num2</span><br><span class="line">print(result) # ==&gt; 10.5</span><br><span class="line"># 减法</span><br><span class="line">result = num1 - num2</span><br><span class="line">print(result) # ==&gt; 9.5</span><br><span class="line"># 乘法</span><br><span class="line">result = num1 * num2</span><br><span class="line">print(result) # ==&gt; 5.0</span><br><span class="line"># 除法</span><br><span class="line">result = num1 / num2</span><br><span class="line">print(result) # ==&gt;20.0</span><br></pre></td></tr></tbody></table></figure><p>从上面可以发现一个规律，整数和浮点数运算后 ，得到的结果不管小数点后是否有值，结果都变成浮点数了，这是合理的，浮点数可以表达整数的结果，但是整数不能表达浮点数的结果。<br><strong>注意：在Python2使用除法可能和Python3得到不一样的结果</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># python2</span><br><span class="line">num1 = 10</span><br><span class="line">num2 = 3</span><br><span class="line">result = num1 / num2</span><br><span class="line">print(result) # ==&gt; 3</span><br><span class="line"># python3</span><br><span class="line">num1 = 10</span><br><span class="line">num2 = 3</span><br><span class="line">result = num1 / num2</span><br><span class="line">print(result) # ==&gt; 3.3333333333333335</span><br></pre></td></tr></tbody></table></figure><p>可以看到在python2，得到的是一个整数的结果，这是因为除数和被除数都是整数时，得到的结果也默认保存为整数了，这是非常不科学的，因此在python3，改进了这一点。</p><h3 id="取模运算"><a href="#取模运算" class="headerlink" title="取模运算"></a><strong>取模运算</strong></h3><p>Python数字支持取模运算，使用百分号<code>%</code>表示取模。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(3 % 2) # ==&gt; 1</span><br><span class="line">print(33 % 10) # ==&gt; 3</span><br><span class="line">print(99 % 30) # ==&gt; 9</span><br></pre></td></tr></tbody></table></figure><p>恰当使用取模运算，可以判断一个数是否为偶数，当一个数对2取模结果为0时，则这个数为偶数，否则为奇数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(3 % 2) # ==&gt; 1 因此3为奇数</span><br><span class="line">print(33 % 2) # ==&gt; 1 因此33为奇数</span><br><span class="line">print(100 % 2) # ==&gt; 0 因此100为偶数</span><br></pre></td></tr></tbody></table></figure><h3 id="地板除"><a href="#地板除" class="headerlink" title="地板除"></a><strong>地板除</strong></h3><p>Python除了普通除法以外，还有一个特殊的除法被称为<code>地板除</code>，对于<code>地板除</code>，得到的结果会忽略纯小数的部分，得到整数的部分，地板除使用<code>//</code>进行。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10//4 # ==&gt; 2</span><br><span class="line">10//2.5 # ==&gt; 4.0</span><br><span class="line">10//3 # ==&gt; 3</span><br></pre></td></tr></tbody></table></figure><h3 id="小数点位数"><a href="#小数点位数" class="headerlink" title="小数点位数"></a><strong>小数点位数</strong></h3><p>使用Python计算小数的时候，经常需要保留小数点后若干位，可以使用round()函数来处理，这里先了解round的调用方式，使用两个参数，第一个是需要保留小数点位数的数值，第二个是保留的位数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = 10 / 3</span><br><span class="line">print(num) # ==&gt; 3.3333333333333335</span><br><span class="line"># 使用round保留两位小数</span><br><span class="line">round(num, 2) # ==&gt; 3.33</span><br></pre></td></tr></tbody></table></figure><h2 id="Python的布尔类型"><a href="#Python的布尔类型" class="headerlink" title="Python的布尔类型"></a>Python的布尔类型</h2><p>前面我们了解到，布尔类型是Python的基础数据类型，布尔类型只有True和False两种值，本节课我们学习布尔类型的集中运算。</p><h3 id="与运算"><a href="#与运算" class="headerlink" title="与运算"></a><strong>与运算</strong></h3><p>只有两个布尔值都为 True 时，计算结果才为 True。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">True and True # ==&gt; True</span><br><span class="line">True and False # ==&gt; False</span><br><span class="line">False and True # ==&gt; False</span><br><span class="line">False and False # ==&gt; False</span><br></pre></td></tr></tbody></table></figure><h3 id="或运算"><a href="#或运算" class="headerlink" title="或运算"></a><strong>或运算</strong></h3><p>只要有一个布尔值为 True，计算结果就是 True。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">True or True # ==&gt; True</span><br><span class="line">True or False # ==&gt; True</span><br><span class="line">False or True # ==&gt; True</span><br><span class="line">False or False # ==&gt; False</span><br></pre></td></tr></tbody></table></figure><h3 id="非运算"><a href="#非运算" class="headerlink" title="非运算"></a><strong>非运算</strong></h3><p>把True变为False，或者把False变为True：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">not True # ==&gt; False</span><br><span class="line">not False # ==&gt; True</span><br></pre></td></tr></tbody></table></figure><p>这些运算有什么用呢？计算机程序是由无数的逻辑分支组成的，通过布尔运算，可以在计算机中实现条件判断，根据计算结果为True或者False，计算机可以自动执行不同的后续代码，因此学习布尔运算也是非常有必要的。</p><p>在Python中，布尔类型还可以与其他数据类型（字符串，数字等）做 and、or和not运算，请看下面的代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = True</span><br><span class="line">print(a and 0 or 99) # ==&gt; 99</span><br></pre></td></tr></tbody></table></figure><p>得到的计算结果不是布尔类型，而是数字99，这是为什么呢？</p><p>因为Python把0、空字符串和None看成False，其他数值和非空字符串都看成True，所以：</p><p><code>True and 0</code>计算结果是0<br>继续计算<code>0 or 99</code>计算结果是 99<br>因此，结果是99。<br>需要注意的是，not计算的优先级是高于and和or的。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True and not False # ==&gt; True</span><br></pre></td></tr></tbody></table></figure><p>在上述布尔计算中，先计算<code>not False = True</code>，然后再计算<code>True and True</code>，因此得到True的结果。</p><h3 id="短路计算"><a href="#短路计算" class="headerlink" title="短路计算"></a><strong>短路计算</strong></h3><ol><li>在计算<code>a and b</code>时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。</li><li>在计算<code>a or b</code>时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。</li></ol><p>所以Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了，直接返回结果。</p><h2 id="Python的字符串"><a href="#Python的字符串" class="headerlink" title="Python的字符串"></a>Python的字符串</h2><p>前面我们讲解了什么是字符串。字符串可以用<code>' '</code>或者<code>" "</code>括起来表示。</p><p>如果字符串本身包含<code>'</code>怎么办？比如我们要表示字符串 <code>I'm OK </code>，这时，可以用<code>" "</code>括起来表示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"I'm OK"</span><br></pre></td></tr></tbody></table></figure><p>类似的，如果字符串包含<code>"</code>，我们就可以用<code>' '</code>括起来表示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'Learn "Python" in imooc'</span><br></pre></td></tr></tbody></table></figure><p>但是，如果字符串既包含<code>'</code>又包含<code>"</code>怎么办？</p><p>这个时候，就需要对字符串中的某些特殊字符进行“转义”，Python字符串用<code>\</code>进行转义。</p><p>要表示字符串<code>Bob said "I'm OK"</code><br>由于<code>'</code>和<code>"</code>会引起歧义，因此，我们在它前面插入一个<code>\</code>表示这是一个普通字符，不代表字符串的起始，因此，这个字符串又可以表示为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'Bob said \"I\'m OK\".'</span><br></pre></td></tr></tbody></table></figure><p>注意：转义字符 <code>\</code>不计入字符串的内容中。</p><p>常用的转义字符还有：</p><p><code>\n</code>表示换行<br><code>\t</code> 表示一个制表符<br><code>\\</code>表示 <code>\</code> 字符本身</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的C#之旅</title>
      <link href="2020/11/19/%E6%88%91%E7%9A%84C-%E4%B9%8B%E6%97%85/"/>
      <url>2020/11/19/%E6%88%91%E7%9A%84C-%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<h1 id="我的C-之旅"><a href="#我的C-之旅" class="headerlink" title="我的C#之旅"></a>我的C#之旅</h1><h2 id="1-开始"><a href="#1-开始" class="headerlink" title="1.开始"></a>1.开始</h2><h4 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h4><p>#region  这里写明这段被折叠的代码的用途</p><p>{ </p><p>}</p><p>#endregion</p><h4 id="特殊的变量赋值"><a href="#特殊的变量赋值" class="headerlink" title="特殊的变量赋值"></a>特殊的变量赋值</h4><p>float 型变量赋值后面需要加上f。</p><p>decimal型变量的赋值后面需要加上m。</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><h5 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h5><p>不需要代码，赋值过程当中自动完成</p><h5 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h5><p>需要代码完成</p><p>1.使用covert命令进行显示转换</p><p>eg: double dox;  </p><p>​      string strX=”18.99”;</p><p>​      dox=convert.ToDouble(strX);</p><p>2.使用parse进行转换</p><p>eg: double dox;  </p><p>​      string strX=”18.99”;</p><p>​      dox=double.parse(strX);</p><h5 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h5><p>储存有限个数的常量</p><p>eg:  </p><p>class program</p><p>{</p><p>staic void main{string [] args}</p><p>​    {</p><p>Console.Writline（（int) sex.男）</p><p>Console.Readkey();</p><p>​    }</p><p>enum  sex</p><p>​     {</p><p>男=1，女=0</p><p>​     }</p><p>}</p><p>枚举类型要与使用他的类在同一级，默认为int，只有int,uint,byte,sbyte,long,unlong,short,unshort这八种类型</p><h5 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h5><p>struct~~~{           </p><p>​                  }</p><p>public 定义在整个类里面都可以使用</p><p>使用某一个结构体时候，先申明变量再给变量里面的不可变量赋值，然后在引用结构</p><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p>类型   [ ]名字=new  类型  [长度固定]；</p><p>类型   [ ]名字=new 类型   [   ];{“ “,” “,” “,” “}长度不限，往里面赋值即可</p><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>string   —-&gt; eg string   str =”aBcDeFg”;</p><p>转换大写</p><p>str=str.ToUpper();     —-&gt;ABCDEFG</p><p>转换小写</p><p>str=str.ToLower();    ——abcdefg</p><p>去掉空格</p><p>str=str.rim();</p><p>在左侧或者右侧添加空格或字符串</p><ol><li><p>str=str.Padleft();            </p><table><thead><tr><th>(3,’~’)</th><th>~~~ aBcDeFg</th></tr></thead><tbody><tr><td>(3,’#’)</td><td>###aBcDeFg</td></tr></tbody></table><p>2.str=str.PadRight();</p><p>删除字符</p><p>str=str.Remove()  括号怕里面需要填写字符的开始位置和长度</p><p>替换字符</p><p>str=str.RePlace(“c”,”:x”);    ——-&gt;aBxDeFg  把c替换为了x</p><p>字符串替换cuan</p><p>str=str.substring();    从指定位置开始截取长度为多少的字符串</p><p>获取指定字符串开始位置的索引</p><p>str.IndexOf(“”);</p><p>判断字符串是否相等</p><p>bool  bo;</p><p>bo=str.Equals(“”);   返回值类型为true或者false（bool类型）</p><p>判断是否存在</p><p>bo=str.Contains(“ “);  返回值类型为true或者false  </p><p> 判断是否以指定支付穿开始或者结束</p><p>bo=str.starsWith(“ “);</p><p>bo=str.Endwith(“ “);返回值类型为true或者false </p><h5 id="关闭窗口、捕捉异常"><a href="#关闭窗口、捕捉异常" class="headerlink" title="关闭窗口、捕捉异常"></a>关闭窗口、捕捉异常</h5><p>this.close();关闭当前界面的窗口</p><p>捕捉异常</p><p>try{</p><p>异常代码</p><p>}</p><p>catch( Exception ex)</p><p>{</p><p>MessageBox.show(“ex.Message”);   —-&gt;提示用户错误类型</p><p>}</p><p>finally()可有可无不管catch结果如何都会哦执行的操作</p><p>{</p><p>}</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
